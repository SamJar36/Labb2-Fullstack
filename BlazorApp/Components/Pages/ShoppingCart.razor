@page "/shopping-cart"
@rendermode InteractiveServer
@using Shared
@inject HttpClient Http

<h3>Shopping Cart</h3>
@if (customers != null && customers.Any())
{
	<div>
		<label for="dropdown">Select user:</label>
		<select id="dropdown" @onchange="OnSelectedCustomerChanged">
			@foreach (var customer in customers)
			{
				<option value="@customer.Id">@customer.FirstName @customer.LastName</option>
			}
		</select>
	</div>
}
@if (shoppingCartItems == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id: </th>
				<th>Product name: </th>
				<th>Quantity: </th>
				<th>Price: </th>
			</tr>
		</thead>
		<tbody>
			@for (int i = 0; i < shoppingCartItems.Count; i++)
			{
				var item = shoppingCartItems[i];
				<tr>
					<td>@item.Id</td>
					<td>@item.Product.ProductName</td>
					<td>@item.Quantity</td>
					<td>@item.Price</td>
					<td>
						<button @onclick="() => RemoveProduct(item.ProductId)">Remove</button>
					</td>
				</tr>
			}
		</tbody>
		@if (shoppingCartItems != null && shoppingCartItems.Any())
		{
			<button @onclick="OrderProducts">Order products</button>
		}
	</table>
}

@code {
	private List<Customer> customers;
	private Customer selectedCustomer;
	private List<ShoppingCartItem> shoppingCartItems;

	protected override async Task OnInitializedAsync()
	{
		customers = await Http.GetFromJsonAsync<List<Customer>>("api/customers");
		selectedCustomer = customers[0];

		shoppingCartItems = await Http.GetFromJsonAsync<List<ShoppingCartItem>>($"api/shoppingcart/{selectedCustomer.Id}");
	}
	private async Task OnSelectedCustomerChanged(ChangeEventArgs e)
	{
		var selectedCustomerId = Guid.Parse(e.Value.ToString());
		selectedCustomer = customers.FirstOrDefault(c => c.Id == selectedCustomerId);

		shoppingCartItems = await Http.GetFromJsonAsync<List<ShoppingCartItem>>($"api/shoppingcart/{selectedCustomer.Id}");
	}
	private async Task RemoveProduct(int productId)
	{
		Guid customerId = selectedCustomer.Id;
		var response = await Http.DeleteAsync($"api/shoppingcart/{customerId}/{productId}");

		if (response.IsSuccessStatusCode)
		{
			var item = shoppingCartItems.FirstOrDefault(i => i.ProductId == productId);
			if (item != null)
			{
				if (item.Quantity > 1)
				{
					item.Quantity -= 1;
				}
				else
				{
					shoppingCartItems.Remove(item);
				}
			}
		}
	}
	private async Task OrderProducts()
	{
		
	}
}
