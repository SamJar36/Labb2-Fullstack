@page "/all-orders"
@rendermode InteractiveServer
@using Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>All Orders</h3>

@if (allOrders == null)
{
    <p>Loading...</p>
}
else if (!allOrders.Any())
{
    <p>No orders found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Customer name</th>
                <th>Order Date</th>
                <th>Total price</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in allOrders)
            {
                <tr>
                    <td>@order.Id</td>
                    @if (order.Customer == null)
                    {
                        <td><em>Customer deleted</em></td>
                    }
                    else
                    {
                        <td>@order.Customer?.FirstName @order.Customer?.LastName</td>
                    }
                    <td>@order.OrderDate</td>
                    <td>@order.TotalPrice</td>
                    <td>@order.Status.ToString()</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="@(() => ViewOrder(order.Id))">View</button>
                        <button class="btn btn-warning btn-sm" @onclick="@(() => EditOrder(order.Id))">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteOrder(order.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Order> allOrders = new();

    protected override async Task OnInitializedAsync()
    {
        allOrders = await Http.GetFromJsonAsync<List<Order>>("api/orders");
    }
    public void ViewOrder(int orderId)
    {
        NavigationManager.NavigateTo($"/view-order/{orderId}");
    }
    public void EditOrder(int orderId)
    {
        NavigationManager.NavigateTo($"/edit-order/{orderId}");
    }
    public async Task DeleteOrder(int orderId)
    {
        var response = await Http.DeleteAsync($"api/orders/{orderId}");
        if (response.IsSuccessStatusCode)
        {
            var toRemove = allOrders.SingleOrDefault(o => o.Id == orderId);
            if (toRemove != null)
            {
                allOrders.Remove(toRemove);
            }
        }
    }
}
