@page "/search-product-name"
@rendermode InteractiveServer
@using Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Search Product by Name</h3>
<input @bind="inputValue" placeholder="Enter name" />
<button @onclick="() => SearchByName(inputValue)">Go</button><br />

<ul>
	@if (productsWithName != null)
	{
		@foreach (var product in productsWithName)
		{
			<li>
				<hr />
				<strong>Id: </strong> @product.Id <br />
				<strong>Product name:</strong> @product.ProductName <br />
				<strong>Product description:</strong> @product.ProductDescription <br />
				<strong>Price:</strong> @product.Price <br />
				<strong>Product category:</strong> @product.ProductCategory<br />
				<strong>Status:</strong> @product.Status <br />
				<button @onclick="() => UpdateProduct(product.Id)">Edit</button>
				<button @onclick="() => DeleteProduct(product.Id)">Delete</button>
			</li>
		}
	}
</ul>

@code {
	private string inputValue;

	private List<Product> productsWithName = new List<Product>();

	private List<Product> products;

	protected override async Task OnInitializedAsync()
	{
		products = await Http.GetFromJsonAsync<List<Product>>("api/products");
	}

	private async Task SearchByName(string name)
	{
		productsWithName.Clear();
		var response = await Http.GetAsync($"api/products/search-by-name/{name}");

		if (response.IsSuccessStatusCode)
		{
			productsWithName = products.Where(c => c.ProductName == name).ToList();
		}
	}
	private async Task UpdateProduct(int productId)
	{
		NavigationManager.NavigateTo($"/edit-product/{productId}");
	}
	private async Task DeleteProduct(int productId)
	{
		var response = await Http.DeleteAsync($"api/products/{productId}");

		if (response.IsSuccessStatusCode)
		{
			var product = products.FirstOrDefault(c => c.Id == productId);
			if (product != null)
			{
				products.Remove(product);
				productsWithName.Remove(product);
			}
			else
			{
				Console.WriteLine("Error deleting customer");
			}
		}
	}
}
