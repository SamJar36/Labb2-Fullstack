@page "/order-products"
@rendermode InteractiveServer
@using Shared
@inject HttpClient Http

@if (customers != null && customers.Any())
{
    <div>
        <label for="dropdown">Select user:</label>
        <select id="dropdown" @onchange="OnSelectedCustomerChanged">
            @foreach (var customer in customers)
            {
                <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
            }
        </select>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id: </th>
                <th>Product name: </th>
                <th>Product description: </th>
                <th>Price: </th>
                <th>Product category: </th>
                <th>Status: </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.ProductName</td>
                    <td>@product.ProductDescription</td>
                    <td>@product.Price</td>
                    <td>@product.ProductCategory</td>
                    <td>@product.Status</td>
                    <td>
                        @if (product.Status == "in stock" || product.Status == "In stock" || product.Status == "In Stock")
                        {
                            <button @onclick="() => BuyProduct(product.Id)">Buy</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Customer> customers = new List<Customer>();
    private List<Product> products = new List<Product>();
    private Customer? selectedCustomer = new Customer();
    private Product selectedProduct = new Product();

    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<Customer>>("api/customers");
        products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        selectedCustomer = customers?[0];
    }

    private async Task BuyProduct(int productId)
    {
        var request = new AddToCartRequest
            {
                CustomerId = selectedCustomer.Id,
                ProductId = productId
            };

        var response = await Http.PostAsJsonAsync("api/shoppingcart", request);
        if (response.IsSuccessStatusCode)
        {
            
        }
    }

    private void OnSelectedCustomerChanged(ChangeEventArgs e)
    {
        var selectedCustomerId = Guid.Parse(e.Value.ToString());
        selectedCustomer = customers.FirstOrDefault(c => c.Id == selectedCustomerId);
    }
}